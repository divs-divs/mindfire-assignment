{"ast":null,"code":"import _classCallCheck from \"/home/divyas/mindfire-assignment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/divyas/mindfire-assignment/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport axios from \"axios\";\nimport constants from \"../constants/constant\";\nimport login from '../views/Pages/Login/Login';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport toastService from \"./toastnotification\";\nvar toastservice = new toastService();\n\nvar HttpTransferService = /*#__PURE__*/function () {\n  function HttpTransferService() {\n    _classCallCheck(this, HttpTransferService);\n\n    this.baseUrl = constants.BASE_URL;\n    this.tokenstring = constants.TOKEN_HEADER_STRING;\n    this.apiEntity = constants.API_ENTITY;\n    this.sourceCustomerEntity = constants.SOURCE_CUSTOMER_ENTITY;\n    this.sourceCustomerAddressEntity = constants.SOURCE_CUSTOMER_ADDRESS;\n    this.sourceCustomeEnquiry = constants.SOURCE_CUSTOMER_ENQUIRY;\n    this.userQueryUrl = constants.USER_QUERY;\n    this.createSourceCustomerEntity = constants.CREATE_SOURCE_COUSTOMER_ENTITY;\n    this.createSourceCustomerEntityAddress = constants.CREATE_SOURCE_CUSTOMER_ENTITY_ADDRESS;\n    this.createSourceCustomerEnquiryEntity = constants.CREATE_SOURCE_COUSTOMER_ENQUIRY;\n    this.createUser = constants.CREATE_USER_QUERY;\n    this.createSourceCustomerEntity = constants.CREATE_SOURCE_COUSTOMER_ENTITY;\n    this.createSourceCustomerEntityAddress = constants.CREATE_SOURCE_CUSTOMER_ENTITY_ADDRESS;\n    this.saveSourceCustomerEntityAddress = constants.SAVE_SOURCE_CUSTOMER_ENTITY_ADDRESS;\n    this.updateSourceCustomerEntityAddress = constants.UPDATE_SOURCE_CUSTOMER_ENTITY_ADDRESS;\n    this.fetchStateList = constants.GET_STATE_LIST;\n    this.fetchCityList = constants.GET_CITY_LIST;\n    this.addcity = constants.ADD_CITY;\n    this.api = constants.API;\n    this.action = constants.ACTION;\n    this.userTitleQuery = constants.USER_TITLE_QUERY;\n    this.changePassword = constants.CHANGEPASSWORD;\n    this.query = constants.QUERY;\n    this.refreshToken = constants.REFRESH_TOKEN;\n    this.userAdditional = constants.USERADDITIONAL;\n    this.refreshErrorMessage = \"Unauthorized: Token Expired\";\n    this.entityAdditional = constants.ENTITY_ADDITIONAL;\n    this.userImage = constants.USER_IMAGE;\n    this.sendmail = constants.SEND_MAIL;\n    this.notificationHistoryQuery = constants.NOTIFICATIONHISTORYQUERY;\n    this.notificationHistory = constants.NOTIFICATIONHISTORY;\n    this.fcmToken = constants.FCMTOKEN;\n    this.apiUserSession = constants.SESSIONS_API_URL;\n    this.logout = constants.LOGOUT;\n  }\n\n  _createClass(HttpTransferService, [{\n    key: \"getRefreshToken\",\n    value: function getRefreshToken(inputjson) {\n      var url = this.baseUrl + this.api + this.refreshToken;\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"passwordChange\",\n    value: function passwordChange(inputjosn, entity_id, user_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + this.createUser + '/' + user_id + this.changePassword;\n      return this.putCall(inputjosn, url);\n    }\n  }, {\n    key: \"updateInfo\",\n    value: function updateInfo(inputjosn, entity_id, user_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + this.createUser + '/' + user_id;\n      return this.putCall(inputjosn, url);\n    }\n  }, {\n    key: \"queryUserImage\",\n    value: function queryUserImage(inputjosn, entity_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + this.userImage;\n      return this.postCall(inputjosn, url);\n    }\n  }, {\n    key: \"userQuery\",\n    value: function userQuery(inputjson, entity_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + this.userQueryUrl;\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"sourceCustomerAddress\",\n    value: function sourceCustomerAddress(inputjson, entity_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + this.sourceCustomerAddressEntity;\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"getSourceCustomerEntity\",\n    value: function getSourceCustomerEntity(inputjson) {\n      var url = this.baseUrl + this.sourceCustomerEntity;\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"getUserQuery\",\n    value: function getUserQuery(inputjson, entity_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + '/user/query';\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"createUserQuery\",\n    value: function createUserQuery(inputjson, entity_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + this.createUser;\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"updateUserQuery\",\n    value: function updateUserQuery(inputjson, entity_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + '/user/' + inputjson.user_id;\n      return this.putCall(inputjson, url);\n    }\n  }, {\n    key: \"deleteUser\",\n    value: function deleteUser(entity_id, user_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + '/user/' + user_id;\n      return this.deleteCall({}, url);\n    }\n  }, {\n    key: \"addSourceCustomerEntity\",\n    value: function addSourceCustomerEntity(inputjson) {\n      var url = this.baseUrl + this.createSourceCustomerEntity;\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"updateSourceCustomerEntity\",\n    value: function updateSourceCustomerEntity(inputjson, entity_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id;\n      return this.putCall(inputjson, url);\n    }\n  }, {\n    key: \"displaySourceCustomerAddress\",\n    value: function displaySourceCustomerAddress(inputjson, entity_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + this.createSourceCustomerEntityAddress;\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"saveSourceCustomerAddress\",\n    value: function saveSourceCustomerAddress(inputjson, entity_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + this.saveSourceCustomerEntityAddress;\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"updateSourceCustomerAddress\",\n    value: function updateSourceCustomerAddress(inputjson, entity_id, address_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + this.updateSourceCustomerEntityAddress + address_id;\n      return this.putCall(inputjson, url);\n    }\n  }, {\n    key: \"deleteSourceCustomerAddress\",\n    value: function deleteSourceCustomerAddress(entity_id, address_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + this.updateSourceCustomerEntityAddress + address_id;\n      return this.deleteCall({}, url);\n    }\n  }, {\n    key: \"getStateList\",\n    value: function getStateList() {\n      var url = this.baseUrl + this.fetchStateList;\n      return this.postCall({}, url);\n    }\n  }, {\n    key: \"getCityList\",\n    value: function getCityList(inputjson) {\n      var url = this.baseUrl + this.fetchCityList;\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"getUserTitle\",\n    value: function getUserTitle(entity_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + this.userTitleQuery;\n      return this.getCall(url);\n    }\n  }, {\n    key: \"setRefreshToken\",\n    value: function setRefreshToken() {\n      var userInfo = localStorage.getItem('user_info');\n\n      if (userInfo) {\n        userInfo = JSON.parse(userInfo);\n        var params = {\n          client_id: localStorage.getItem('client_id'),\n          user_id: userInfo.user_id,\n          server_unique_id: localStorage.getItem('serveruniqueid')\n        };\n        return this.getRefreshToken(params).then(function (response) {\n          if (response.status === 200) {\n            var loginObject = new login();\n            loginObject.setUserInfoInLocalStorage(response);\n            localStorage.setItem(\"refreshtoken\", response[\"headers\"][\"refresh-token\"]);\n            return true;\n          } else {\n            return false;\n          }\n        });\n      }\n    }\n  }, {\n    key: \"updateUserAdditionalAttributes\",\n    value: function updateUserAdditionalAttributes(inputjson, entity_id, user_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + this.createUser + '/' + user_id + this.userAdditional;\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"queryUserAdditionalAttributes\",\n    value: function queryUserAdditionalAttributes(inputjson, entity_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + '/' + this.userAdditional + this.query;\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"updateEntityAdditionalAttributes\",\n    value: function updateEntityAdditionalAttributes(inputjson, entity_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + '/' + this.entityAdditional;\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"queryEntityAdditionalAttributes\",\n    value: function queryEntityAdditionalAttributes(inputjson) {\n      var url = this.baseUrl + this.api + this.entityAdditional + this.query;\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"sendEmail\",\n    value: function sendEmail(inputjson) {\n      var url = this.baseUrl + this.api + this.sendmail;\n      return this.postCall(inputjson, url);\n    }\n  }, {\n    key: \"enqueryNotification\",\n    value: function enqueryNotification(inputjosn, entity_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + this.notificationHistoryQuery;\n      return this.postCall(inputjosn, url);\n    }\n  }, {\n    key: \"readNotification\",\n    value: function readNotification(inputjson, entity_id, user_id) {\n      var url = this.baseUrl + this.apiEntity + entity_id + this.createUser + '/' + user_id + this.notificationHistory;\n      return this.putCall(inputjson, url);\n    }\n  }, {\n    key: \"logoutSession\",\n    value: function logoutSession() {\n      var inputjosn = {\n        \"user_id\": constants.USER_ID,\n        \"client_id\": constants.CLIENT_ID\n      };\n      var url = this.baseUrl + this.apiUserSession + this.logout;\n      return this.postCall(inputjosn, url);\n    }\n  }, {\n    key: \"postCall\",\n    value: function postCall(inputjson, url) {\n      var accesstoken = localStorage.getItem(\"token\");\n      var self = this;\n      return axios.request({\n        url: url,\n        method: \"post\",\n        data: inputjson,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          'x-auth-token': accesstoken,\n          'refresh-token': localStorage.getItem('refreshtoken')\n        }\n      }).then(function (response) {\n        return response;\n      }).catch(function (error) {\n        console.log(error.response);\n        toastservice.error(error.response.data.message);\n        return error.response.data;\n      });\n    }\n  }, {\n    key: \"putCall\",\n    value: function putCall(inputjson, url) {\n      var accesstoken = localStorage.getItem(\"token\");\n      var self = this;\n      return axios.request({\n        url: url,\n        method: \"put\",\n        data: inputjson,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          'x-auth-token': accesstoken,\n          'refresh-token': localStorage.getItem('refreshtoken')\n        }\n      }).then(function (response) {\n        return response;\n      }).catch(function (error) {\n        toastservice.error(error.response.data.message);\n        return error.response.data;\n      });\n    }\n  }, {\n    key: \"deleteCall\",\n    value: function deleteCall(inputjson, url) {\n      var self = this;\n      var accesstoken = localStorage.getItem(\"token\");\n      return axios.request({\n        url: url,\n        method: \"delete\",\n        data: inputjson,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          'x-auth-token': accesstoken,\n          'refresh-token': localStorage.getItem('refreshtoken')\n        }\n      }).then(function (response) {\n        return response;\n      }).catch(function (error) {\n        toastservice.error(error.response.data.message);\n        return error.response.data;\n      });\n    }\n  }, {\n    key: \"getCall\",\n    value: function getCall(url) {\n      var self = this;\n      var accesstoken = localStorage.getItem(\"token\");\n      return axios({\n        method: \"get\",\n        url: url,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          'x-auth-token': accesstoken,\n          'refresh-token': localStorage.getItem('refreshtoken')\n        }\n      }).then(function (response) {\n        return response;\n      }).catch(function (error) {\n        return error.response.data;\n      });\n    }\n  }]);\n\n  return HttpTransferService;\n}();\n\nexport { HttpTransferService as default };","map":{"version":3,"sources":["/home/divyas/mindfire-assignment/src/utils/httptransfer.js"],"names":["axios","constants","login","toastService","toastservice","HttpTransferService","baseUrl","BASE_URL","tokenstring","TOKEN_HEADER_STRING","apiEntity","API_ENTITY","sourceCustomerEntity","SOURCE_CUSTOMER_ENTITY","sourceCustomerAddressEntity","SOURCE_CUSTOMER_ADDRESS","sourceCustomeEnquiry","SOURCE_CUSTOMER_ENQUIRY","userQueryUrl","USER_QUERY","createSourceCustomerEntity","CREATE_SOURCE_COUSTOMER_ENTITY","createSourceCustomerEntityAddress","CREATE_SOURCE_CUSTOMER_ENTITY_ADDRESS","createSourceCustomerEnquiryEntity","CREATE_SOURCE_COUSTOMER_ENQUIRY","createUser","CREATE_USER_QUERY","saveSourceCustomerEntityAddress","SAVE_SOURCE_CUSTOMER_ENTITY_ADDRESS","updateSourceCustomerEntityAddress","UPDATE_SOURCE_CUSTOMER_ENTITY_ADDRESS","fetchStateList","GET_STATE_LIST","fetchCityList","GET_CITY_LIST","addcity","ADD_CITY","api","API","action","ACTION","userTitleQuery","USER_TITLE_QUERY","changePassword","CHANGEPASSWORD","query","QUERY","refreshToken","REFRESH_TOKEN","userAdditional","USERADDITIONAL","refreshErrorMessage","entityAdditional","ENTITY_ADDITIONAL","userImage","USER_IMAGE","sendmail","SEND_MAIL","notificationHistoryQuery","NOTIFICATIONHISTORYQUERY","notificationHistory","NOTIFICATIONHISTORY","fcmToken","FCMTOKEN","apiUserSession","SESSIONS_API_URL","logout","LOGOUT","inputjson","url","postCall","inputjosn","entity_id","user_id","putCall","deleteCall","address_id","getCall","userInfo","localStorage","getItem","JSON","parse","params","client_id","server_unique_id","getRefreshToken","then","response","status","loginObject","setUserInfoInLocalStorage","setItem","USER_ID","CLIENT_ID","accesstoken","self","request","method","data","headers","Accept","catch","error","console","log","message"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,OAAO,uCAAP;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,IAAMC,YAAY,GAAG,IAAID,YAAJ,EAArB;;IACqBE,mB;;;;SACnBC,O,GAAUL,SAAS,CAACM,Q;SACpBC,W,GAAcP,SAAS,CAACQ,mB;SACxBC,S,GAAWT,SAAS,CAACU,U;SACrBC,oB,GAAsBX,SAAS,CAACY,sB;SAChCC,2B,GAA4Bb,SAAS,CAACc,uB;SACtCC,oB,GAAqBf,SAAS,CAACgB,uB;SAC/BC,Y,GAAajB,SAAS,CAACkB,U;SACvBC,0B,GAA2BnB,SAAS,CAACoB,8B;SACrCC,iC,GAAkCrB,SAAS,CAACsB,qC;SAC5CC,iC,GAAoCvB,SAAS,CAACwB,+B;SAC9CC,U,GAAWzB,SAAS,CAAC0B,iB;SACrBP,0B,GAA2BnB,SAAS,CAACoB,8B;SACrCC,iC,GAAkCrB,SAAS,CAACsB,qC;SAC5CK,+B,GAAkC3B,SAAS,CAAC4B,mC;SAC5CC,iC,GAAoC7B,SAAS,CAAC8B,qC;SAC9CC,c,GAAiB/B,SAAS,CAACgC,c;SAC3BC,a,GAAgBjC,SAAS,CAACkC,a;SAC1BC,O,GAAQnC,SAAS,CAACoC,Q;SAClBC,G,GAAMrC,SAAS,CAACsC,G;SAChBC,M,GAASvC,SAAS,CAACwC,M;SACnBC,c,GAAiBzC,SAAS,CAAC0C,gB;SAC3BC,c,GAAiB3C,SAAS,CAAC4C,c;SAC3BC,K,GAAQ7C,SAAS,CAAC8C,K;SAClBC,Y,GAAe/C,SAAS,CAACgD,a;SACzBC,c,GAAiBjD,SAAS,CAACkD,c;SAC3BC,mB,GAAsB,6B;SACtBC,gB,GAAmBpD,SAAS,CAACqD,iB;SAC7BC,S,GAAYtD,SAAS,CAACuD,U;SACtBC,Q,GAAWxD,SAAS,CAACyD,S;SACrBC,wB,GAA2B1D,SAAS,CAAC2D,wB;SACrCC,mB,GAAsB5D,SAAS,CAAC6D,mB;SAChCC,Q,GAAW9D,SAAS,CAAC+D,Q;SACrBC,c,GAAiBhE,SAAS,CAACiE,gB;SAC3BC,M,GAASlE,SAAS,CAACmE,M;;;;;oCAGFC,S,EAAW;AAC1B,UAAIC,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKgC,GAApB,GAA0B,KAAKU,YAAzC;AACA,aAAO,KAAKuB,QAAL,CAAcF,SAAd,EAAyBC,GAAzB,CAAP;AACD;;;mCAEeE,S,EAAWC,S,EAAWC,O,EAAS;AAC7C,UAAIJ,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAAhC,GAA4C,KAAK/C,UAAjD,GAA6D,GAA7D,GAAmEgD,OAAnE,GAA6E,KAAK9B,cAA5F;AACA,aAAO,KAAK+B,OAAL,CAAaH,SAAb,EAAwBF,GAAxB,CAAP;AACD;;;+BAEWE,S,EAAWC,S,EAAWC,O,EAAS;AACzC,UAAIJ,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAAhC,GAA4C,KAAK/C,UAAjD,GAA6D,GAA7D,GAAmEgD,OAA7E;AACA,aAAO,KAAKC,OAAL,CAAaH,SAAb,EAAwBF,GAAxB,CAAP;AACD;;;mCAEcE,S,EAAWC,S,EAAW;AACnC,UAAIH,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAAhC,GAA4C,KAAKlB,SAA3D;AACA,aAAO,KAAKgB,QAAL,CAAcC,SAAd,EAAyBF,GAAzB,CAAP;AACD;;;8BAESD,S,EAAUI,S,EACpB;AACE,UAAIH,GAAG,GAAC,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAAhC,GAA4C,KAAKvD,YAAzD;AACA,aAAO,KAAKqD,QAAL,CAAcF,SAAd,EAAwBC,GAAxB,CAAP;AACD;;;0CAEqBD,S,EAAUI,S,EAChC;AACG,UAAIH,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAAhC,GAA4C,KAAK3D,2BAA3D;AACA,aAAO,KAAKyD,QAAL,CAAcF,SAAd,EAAwBC,GAAxB,CAAP;AACF;;;4CAGuBD,S,EACxB;AACG,UAAIC,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKM,oBAA9B;AACA,aAAO,KAAK2D,QAAL,CAAcF,SAAd,EAAwBC,GAAxB,CAAP;AACF;;;iCAEaD,S,EAAWI,S,EAAW;AAClC,UAAIH,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAAhC,GAA4C,aAAtD;AACA,aAAO,KAAKF,QAAL,CAAcF,SAAd,EAAyBC,GAAzB,CAAP;AACD;;;oCACeD,S,EAAUI,S,EAC1B;AACE,UAAIH,GAAG,GAAE,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAA+B+D,SAA/B,GAA2C,KAAK/C,UAAzD;AACA,aAAO,KAAK6C,QAAL,CAAcF,SAAd,EAAwBC,GAAxB,CAAP;AACD;;;oCAEeD,S,EAAUI,S,EAC1B;AACE,UAAIH,GAAG,GAAE,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAA+B+D,SAA/B,GAA2C,QAA3C,GAAsDJ,SAAS,CAACK,OAAzE;AACA,aAAO,KAAKC,OAAL,CAAaN,SAAb,EAAwBC,GAAxB,CAAP;AACD;;;+BAEUG,S,EAAUC,O,EACrB;AACE,UAAIJ,GAAG,GAAE,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAA+B+D,SAA/B,GAA2C,QAA3C,GAAsDC,OAA/D;AACA,aAAO,KAAKE,UAAL,CAAgB,EAAhB,EAAoBN,GAApB,CAAP;AACD;;;4CAEuBD,S,EACxB;AACG,UAAIC,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKc,0BAA9B;AACA,aAAO,KAAKmD,QAAL,CAAcF,SAAd,EAAwBC,GAAxB,CAAP;AACF;;;+CAC0BD,S,EAAWI,S,EACtC;AACG,UAAIH,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAA1C;AACA,aAAO,KAAKE,OAAL,CAAaN,SAAb,EAAuBC,GAAvB,CAAP;AACF;;;iDAE4BD,S,EAAUI,S,EACvC;AACE,UAAIH,GAAG,GAAE,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAAhC,GAA4C,KAAKnD,iCAA1D;AACA,aAAO,KAAKiD,QAAL,CAAcF,SAAd,EAAwBC,GAAxB,CAAP;AACD;;;8CAEyBD,S,EAAUI,S,EACpC;AACE,UAAIH,GAAG,GAAE,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAA+B+D,SAA/B,GAA2C,KAAK7C,+BAAzD;AACA,aAAO,KAAK2C,QAAL,CAAcF,SAAd,EAAwBC,GAAxB,CAAP;AACD;;;gDAE4BD,S,EAAWI,S,EAAWI,U,EAAY;AAC7D,UAAIP,GAAG,GAAE,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAA+B+D,SAA/B,GAA2C,KAAK3C,iCAAhD,GAAoF+C,UAA7F;AACA,aAAO,KAAKF,OAAL,CAAaN,SAAb,EAAuBC,GAAvB,CAAP;AACD;;;gDAE2BG,S,EAAWI,U,EAAY;AACjD,UAAIP,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAAhC,GAA4C,KAAK3C,iCAAjD,GAAqF+C,UAA/F;AACA,aAAO,KAAKD,UAAL,CAAgB,EAAhB,EAAoBN,GAApB,CAAP;AACD;;;mCAEe;AACd,UAAIA,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAK0B,cAA9B;AACA,aAAO,KAAKuC,QAAL,CAAc,EAAd,EAAkBD,GAAlB,CAAP;AACD;;;gCAEYD,S,EAAW;AACtB,UAAIC,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAK4B,aAA9B;AACA,aAAO,KAAKqC,QAAL,CAAcF,SAAd,EAAyBC,GAAzB,CAAP;AACD;;;iCAEaG,S,EAAW;AACvB,UAAIH,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAAhC,GAA4C,KAAK/B,cAA3D;AACA,aAAO,KAAKoC,OAAL,CAAaR,GAAb,CAAP;AACD;;;sCAEkB;AACjB,UAAIS,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAf;;AACE,UAAIF,QAAJ,EAAc;AACZA,QAAAA,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAX;AAEA,YAAIK,MAAM,GAAG;AACXC,UAAAA,SAAS,EAAEL,YAAY,CAACC,OAAb,CAAqB,WAArB,CADA;AAEXP,UAAAA,OAAO,EAAEK,QAAQ,CAACL,OAFP;AAGXY,UAAAA,gBAAgB,EAAEN,YAAY,CAACC,OAAb,CAAqB,gBAArB;AAHP,SAAb;AAKE,eAAO,KAAKM,eAAL,CAAqBH,MAArB,EACNI,IADM,CACD,UAAAC,QAAQ,EAAI;AAChB,cAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,gBAAIC,WAAW,GAAI,IAAIzF,KAAJ,EAAnB;AACAyF,YAAAA,WAAW,CAACC,yBAAZ,CAAsCH,QAAtC;AACAT,YAAAA,YAAY,CAACa,OAAb,CACE,cADF,EAEEJ,QAAQ,CAAC,SAAD,CAAR,CAAoB,eAApB,CAFF;AAIA,mBAAO,IAAP;AACD,WARD,MAQO;AACL,mBAAO,KAAP;AACD;AACF,SAbM,CAAP;AAcH;AACJ;;;mDAC+BpB,S,EAAWI,S,EAAWC,O,EAAS;AAC7D,UAAIJ,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAAhC,GAA4C,KAAK/C,UAAjD,GAA8D,GAA9D,GAAoEgD,OAApE,GAA8E,KAAKxB,cAA7F;AACA,aAAO,KAAKqB,QAAL,CAAcF,SAAd,EAAyBC,GAAzB,CAAP;AACD;;;kDAC8BD,S,EAAWI,S,EAAW;AACnD,UAAIH,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAAhC,GAA4C,GAA5C,GAAkD,KAAKvB,cAAvD,GAAwE,KAAKJ,KAAvF;AACA,aAAO,KAAKyB,QAAL,CAAcF,SAAd,EAAyBC,GAAzB,CAAP;AACD;;;qDACiCD,S,EAAWI,S,EAAW;AACtD,UAAIH,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAAhC,GAA4C,GAA5C,GAAmD,KAAKpB,gBAAlE;AACA,aAAO,KAAKkB,QAAL,CAAcF,SAAd,EAAyBC,GAAzB,CAAP;AACD;;;oDACgCD,S,EAAW;AAC1C,UAAIC,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKgC,GAApB,GAA0B,KAAKe,gBAA/B,GAAkD,KAAKP,KAAjE;AACA,aAAO,KAAKyB,QAAL,CAAcF,SAAd,EAAyBC,GAAzB,CAAP;AACD;;;8BACSD,S,EAAW;AACnB,UAAIC,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKgC,GAApB,GAA0B,KAAKmB,QAAzC;AACA,aAAO,KAAKc,QAAL,CAAcF,SAAd,EAAyBC,GAAzB,CAAP;AACD;;;wCACmBE,S,EAAWC,S,EAAU;AACvC,UAAIH,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAAhC,GAA4C,KAAKd,wBAA3D;AACA,aAAO,KAAKY,QAAL,CAAcC,SAAd,EAAwBF,GAAxB,CAAP;AACD;;;qCAEgBD,S,EAAWI,S,EAAWC,O,EAAQ;AAC7C,UAAIJ,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAKI,SAApB,GAAgC+D,SAAhC,GAA4C,KAAK/C,UAAjD,GAA8D,GAA9D,GAAoEgD,OAApE,GAA8E,KAAKb,mBAA7F;AACA,aAAO,KAAKc,OAAL,CAAaN,SAAb,EAAuBC,GAAvB,CAAP;AACD;;;oCAEc;AACb,UAAIE,SAAS,GAAC;AACZ,mBAAWvE,SAAS,CAAC6F,OADT;AAEZ,qBAAY7F,SAAS,CAAC8F;AAFV,OAAd;AAIA,UAAIzB,GAAG,GAAG,KAAKhE,OAAL,GAAe,KAAK2D,cAApB,GAAqC,KAAKE,MAApD;AACA,aAAO,KAAKI,QAAL,CAAcC,SAAd,EAAwBF,GAAxB,CAAP;AACD;;;6BAEQD,S,EAAWC,G,EAAK;AACvB,UAAI0B,WAAW,GAAGhB,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlB;AACA,UAAIgB,IAAI,GAAG,IAAX;AACA,aAAOjG,KAAK,CACTkG,OADI,CACI;AACP5B,QAAAA,GAAG,EAAEA,GADE;AAEP6B,QAAAA,MAAM,EAAE,MAFD;AAGPC,QAAAA,IAAI,EAAE/B,SAHC;AAIPgC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE,kBAFD;AAGN,0BAAgBN,WAHV;AAIN,2BAAiBhB,YAAY,CAACC,OAAb,CAAqB,cAArB;AAJX;AAJF,OADJ,EAYJO,IAZI,CAYC,UAASC,QAAT,EAAmB;AACvB,eAAOA,QAAP;AACD,OAdI,EAeJc,KAfI,CAeE,UAASC,KAAT,EAAgB;AACrBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACf,QAAlB;AACArF,QAAAA,YAAY,CAACoG,KAAb,CAAmBA,KAAK,CAACf,QAAN,CAAeW,IAAf,CAAoBO,OAAvC;AACA,eAAOH,KAAK,CAACf,QAAN,CAAeW,IAAtB;AACD,OAnBI,CAAP;AAoBD;;;4BAEO/B,S,EAAWC,G,EAAK;AACtB,UAAI0B,WAAW,GAAGhB,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlB;AACA,UAAIgB,IAAI,GAAG,IAAX;AACA,aAAOjG,KAAK,CACTkG,OADI,CACI;AACP5B,QAAAA,GAAG,EAAEA,GADE;AAEP6B,QAAAA,MAAM,EAAE,KAFD;AAGPC,QAAAA,IAAI,EAAE/B,SAHC;AAIPgC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE,kBAFD;AAGP,0BAAgBN,WAHT;AAIP,2BAAiBhB,YAAY,CAACC,OAAb,CAAqB,cAArB;AAJV;AAJF,OADJ,EAYJO,IAZI,CAYC,UAASC,QAAT,EAAmB;AACvB,eAAOA,QAAP;AACD,OAdI,EAeJc,KAfI,CAeE,UAASC,KAAT,EAAgB;AACrBpG,QAAAA,YAAY,CAACoG,KAAb,CAAmBA,KAAK,CAACf,QAAN,CAAeW,IAAf,CAAoBO,OAAvC;AACA,eAAOH,KAAK,CAACf,QAAN,CAAeW,IAAtB;AACD,OAlBI,CAAP;AAmBD;;;+BAEU/B,S,EAAWC,G,EAAK;AACzB,UAAI2B,IAAI,GAAG,IAAX;AACA,UAAID,WAAW,GAAGhB,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlB;AACA,aAAOjF,KAAK,CACTkG,OADI,CACI;AACP5B,QAAAA,GAAG,EAAEA,GADE;AAEP6B,QAAAA,MAAM,EAAE,QAFD;AAGPC,QAAAA,IAAI,EAAE/B,SAHC;AAIPgC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE,kBAFD;AAGP,0BAAgBN,WAHT;AAIP,2BAAiBhB,YAAY,CAACC,OAAb,CAAqB,cAArB;AAJV;AAJF,OADJ,EAYJO,IAZI,CAYC,UAASC,QAAT,EAAmB;AACvB,eAAOA,QAAP;AACD,OAdI,EAeJc,KAfI,CAeE,UAASC,KAAT,EAAgB;AACrBpG,QAAAA,YAAY,CAACoG,KAAb,CAAmBA,KAAK,CAACf,QAAN,CAAeW,IAAf,CAAoBO,OAAvC;AACA,eAAOH,KAAK,CAACf,QAAN,CAAeW,IAAtB;AACD,OAlBI,CAAP;AAmBD;;;4BAEO9B,G,EAAK;AACX,UAAI2B,IAAI,GAAG,IAAX;AACA,UAAID,WAAW,GAAGhB,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAlB;AACA,aAAOjF,KAAK,CAAC;AACXmG,QAAAA,MAAM,EAAE,KADG;AAEX7B,QAAAA,GAAG,EAAEA,GAFM;AAGX+B,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE,kBAFD;AAGP,0BAAgBN,WAHT;AAIP,2BAAiBhB,YAAY,CAACC,OAAb,CAAqB,cAArB;AAJV;AAHE,OAAD,CAAL,CAUJO,IAVI,CAUC,UAASC,QAAT,EAAmB;AACvB,eAAOA,QAAP;AACD,OAZI,EAaJc,KAbI,CAaE,UAASC,KAAT,EAAgB;AACrB,eAAOA,KAAK,CAACf,QAAN,CAAeW,IAAtB;AACD,OAfI,CAAP;AAgBD;;;;;;SA/SkB/F,mB","sourcesContent":["import axios from \"axios\";\nimport constants from \"../constants/constant\";\nimport login from '../views/Pages/Login/Login';\nimport \"react-toastify/dist/ReactToastify.css\";\nimport toastService from \"./toastnotification\";\nconst toastservice = new toastService();\nexport default class HttpTransferService {\n  baseUrl = constants.BASE_URL;\n  tokenstring = constants.TOKEN_HEADER_STRING;\n  apiEntity =constants.API_ENTITY;\n  sourceCustomerEntity= constants.SOURCE_CUSTOMER_ENTITY;\n  sourceCustomerAddressEntity=constants.SOURCE_CUSTOMER_ADDRESS;\n  sourceCustomeEnquiry=constants.SOURCE_CUSTOMER_ENQUIRY;\n  userQueryUrl=constants.USER_QUERY;\n  createSourceCustomerEntity=constants.CREATE_SOURCE_COUSTOMER_ENTITY\n  createSourceCustomerEntityAddress=constants.CREATE_SOURCE_CUSTOMER_ENTITY_ADDRESS\n  createSourceCustomerEnquiryEntity = constants.CREATE_SOURCE_COUSTOMER_ENQUIRY\n  createUser=constants.CREATE_USER_QUERY;\n  createSourceCustomerEntity=constants.CREATE_SOURCE_COUSTOMER_ENTITY;\n  createSourceCustomerEntityAddress=constants.CREATE_SOURCE_CUSTOMER_ENTITY_ADDRESS;\n  saveSourceCustomerEntityAddress = constants.SAVE_SOURCE_CUSTOMER_ENTITY_ADDRESS;\n  updateSourceCustomerEntityAddress = constants.UPDATE_SOURCE_CUSTOMER_ENTITY_ADDRESS;\n  fetchStateList = constants.GET_STATE_LIST;\n  fetchCityList = constants.GET_CITY_LIST;\n  addcity=constants.ADD_CITY\n  api = constants.API;\n  action = constants.ACTION;\n  userTitleQuery = constants.USER_TITLE_QUERY\n  changePassword = constants.CHANGEPASSWORD;\n  query = constants.QUERY;\n  refreshToken = constants.REFRESH_TOKEN;\n  userAdditional = constants.USERADDITIONAL;\n  refreshErrorMessage = \"Unauthorized: Token Expired\";\n  entityAdditional = constants.ENTITY_ADDITIONAL;\n  userImage = constants.USER_IMAGE;\n  sendmail = constants.SEND_MAIL;\n  notificationHistoryQuery = constants.NOTIFICATIONHISTORYQUERY\n  notificationHistory = constants.NOTIFICATIONHISTORY\n  fcmToken = constants.FCMTOKEN\n  apiUserSession = constants.SESSIONS_API_URL;\n  logout = constants.LOGOUT;\n \n\n  getRefreshToken (inputjson) {\n    var url = this.baseUrl + this.api + this.refreshToken\n    return this.postCall(inputjson, url)\n  }\n\n  passwordChange (inputjosn, entity_id, user_id) {\n    var url = this.baseUrl + this.apiEntity + entity_id + this.createUser +'/' + user_id + this.changePassword\n    return this.putCall(inputjosn, url)\n  }\n\n  updateInfo (inputjosn, entity_id, user_id) {\n    var url = this.baseUrl + this.apiEntity + entity_id + this.createUser +'/' + user_id\n    return this.putCall(inputjosn, url)\n  }\n\n  queryUserImage(inputjosn, entity_id) {\n    var url = this.baseUrl + this.apiEntity + entity_id + this.userImage\n    return this.postCall(inputjosn, url)\n  }\n\n  userQuery(inputjson,entity_id)\n  {\n    var url=this.baseUrl + this.apiEntity + entity_id + this.userQueryUrl;\n    return this.postCall(inputjson,url)\n  }\n\n  sourceCustomerAddress(inputjson,entity_id)\n  {\n     var url = this.baseUrl + this.apiEntity + entity_id + this.sourceCustomerAddressEntity;\n     return this.postCall(inputjson,url)\n  }\n\n\n  getSourceCustomerEntity(inputjson)\n  {\n     var url = this.baseUrl + this.sourceCustomerEntity;\n     return this.postCall(inputjson,url)\n  }\n\n  getUserQuery (inputjson, entity_id) {\n    var url = this.baseUrl + this.apiEntity + entity_id + '/user/query'\n    return this.postCall(inputjson, url)\n  }\n  createUserQuery(inputjson,entity_id)\n  {\n    var url =this.baseUrl + this.apiEntity+ entity_id + this.createUser;\n    return this.postCall(inputjson,url)\n  }\n\n  updateUserQuery(inputjson,entity_id)\n  {\n    var url =this.baseUrl + this.apiEntity+ entity_id + '/user/' + inputjson.user_id;\n    return this.putCall(inputjson, url)\n  }\n\n  deleteUser(entity_id,user_id)\n  {\n    var url =this.baseUrl + this.apiEntity+ entity_id + '/user/' + user_id;\n    return this.deleteCall({}, url)\n  }\n\n  addSourceCustomerEntity(inputjson)\n  {\n     var url = this.baseUrl + this.createSourceCustomerEntity;\n     return this.postCall(inputjson,url)\n  }\n  updateSourceCustomerEntity(inputjson, entity_id)\n  {\n     var url = this.baseUrl + this.apiEntity + entity_id;\n     return this.putCall(inputjson,url)\n  }\n\n  displaySourceCustomerAddress(inputjson,entity_id)\n  {\n    var url =this.baseUrl + this.apiEntity + entity_id + this.createSourceCustomerEntityAddress;\n    return this.postCall(inputjson,url)\n  }\n\n  saveSourceCustomerAddress(inputjson,entity_id)\n  {\n    var url =this.baseUrl + this.apiEntity+ entity_id + this.saveSourceCustomerEntityAddress;\n    return this.postCall(inputjson,url)\n  }\n\n  updateSourceCustomerAddress (inputjson, entity_id, address_id) {\n    var url =this.baseUrl + this.apiEntity+ entity_id + this.updateSourceCustomerEntityAddress + address_id;\n    return this.putCall(inputjson,url)\n  }\n\n  deleteSourceCustomerAddress(entity_id, address_id) {\n    var url = this.baseUrl + this.apiEntity + entity_id + this.updateSourceCustomerEntityAddress + address_id\n    return this.deleteCall({}, url);\n  }\n\n  getStateList () {\n    var url = this.baseUrl + this.fetchStateList\n    return this.postCall({}, url)\n  }\n\n  getCityList (inputjson) {\n    var url = this.baseUrl + this.fetchCityList\n    return this.postCall(inputjson, url)\n  }\n\n  getUserTitle (entity_id) {\n    var url = this.baseUrl + this.apiEntity + entity_id + this.userTitleQuery\n    return this.getCall(url)\n  }\n\n  setRefreshToken () {\n    let userInfo = localStorage.getItem('user_info')\n      if (userInfo) {\n        userInfo = JSON.parse(userInfo)\n        \n        var params = {\n          client_id: localStorage.getItem('client_id'),\n          user_id: userInfo.user_id,\n          server_unique_id: localStorage.getItem('serveruniqueid')\n        }\n          return this.getRefreshToken(params)\n          .then(response => {\n            if (response.status === 200) {\n              let loginObject  = new login()\n              loginObject.setUserInfoInLocalStorage(response)\n              localStorage.setItem(\n                \"refreshtoken\",\n                response[\"headers\"][\"refresh-token\"]\n              );\n              return true\n            } else {\n              return false\n            }\n          })\n      }\n  }\n  updateUserAdditionalAttributes (inputjson, entity_id, user_id) {\n    var url = this.baseUrl + this.apiEntity + entity_id + this.createUser + '/' + user_id + this.userAdditional\n    return this.postCall(inputjson, url)\n  }\n  queryUserAdditionalAttributes (inputjson, entity_id) {\n    var url = this.baseUrl + this.apiEntity + entity_id + '/' + this.userAdditional + this.query\n    return this.postCall(inputjson, url)\n  }\n  updateEntityAdditionalAttributes (inputjson, entity_id) {\n    var url = this.baseUrl + this.apiEntity + entity_id + '/' +  this.entityAdditional\n    return this.postCall(inputjson, url)\n  }\n  queryEntityAdditionalAttributes (inputjson) {\n    var url = this.baseUrl + this.api + this.entityAdditional + this.query\n    return this.postCall(inputjson, url)\n  }\n  sendEmail(inputjson) {\n    let url = this.baseUrl + this.api + this.sendmail\n    return this.postCall(inputjson, url)\n  }\n  enqueryNotification(inputjosn, entity_id){\n    var url = this.baseUrl + this.apiEntity + entity_id + this.notificationHistoryQuery\n    return this.postCall(inputjosn,url)\n  }\n\n  readNotification(inputjson, entity_id, user_id){\n    var url = this.baseUrl + this.apiEntity + entity_id + this.createUser + '/' + user_id + this.notificationHistory\n    return this.putCall(inputjson,url)\n  }\n\n  logoutSession(){\n    let inputjosn={\n      \"user_id\": constants.USER_ID,\n      \"client_id\":constants.CLIENT_ID\n    }\n    var url = this.baseUrl + this.apiUserSession + this.logout\n    return this.postCall(inputjosn,url)\n  }\n\n  postCall(inputjson, url) {\n    var accesstoken = localStorage.getItem(\"token\");\n    var self = this;\n    return axios\n      .request({\n        url: url,\n        method: \"post\",\n        data: inputjson,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n           'x-auth-token': accesstoken,\n           'refresh-token': localStorage.getItem('refreshtoken')\n        }\n      })\n      .then(function(response) {\n        return response;\n      })\n      .catch(function(error) {\n        console.log(error.response)\n        toastservice.error(error.response.data.message);\n        return error.response.data;\n      });\n  }\n\n  putCall(inputjson, url) {\n    var accesstoken = localStorage.getItem(\"token\");\n    var self = this\n    return axios\n      .request({\n        url: url,\n        method: \"put\",\n        data: inputjson,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          'x-auth-token': accesstoken,\n          'refresh-token': localStorage.getItem('refreshtoken')\n        }\n      })\n      .then(function(response) {\n        return response;\n      })\n      .catch(function(error) {\n        toastservice.error(error.response.data.message);\n        return error.response.data;\n      });\n  }\n\n  deleteCall(inputjson, url) {\n    var self = this\n    var accesstoken = localStorage.getItem(\"token\");\n    return axios\n      .request({\n        url: url,\n        method: \"delete\",\n        data: inputjson,\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          'x-auth-token': accesstoken,\n          'refresh-token': localStorage.getItem('refreshtoken')\n        }\n      })\n      .then(function(response) {\n        return response;\n      })\n      .catch(function(error) {\n        toastservice.error(error.response.data.message);\n        return error.response.data;\n      });\n  }\n\n  getCall(url) {\n    var self = this\n    var accesstoken = localStorage.getItem(\"token\");\n    return axios({\n      method: \"get\",\n      url: url,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        'x-auth-token': accesstoken,\n        'refresh-token': localStorage.getItem('refreshtoken')\n      }\n    })\n      .then(function(response) {\n        return response;\n      })\n      .catch(function(error) {\n        return error.response.data;\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}